import decimal
import unittest
import sheets


class TestSorted(unittest.TestCase):
    '''
    This class tests the sorting of a workbook.
    '''
    def test_basic_sort(self):
        wb = sheets.Workbook()
        (_, name) = wb.new_sheet()

        wb.set_cell_contents(name, 'a1', 'false')
        wb.set_cell_contents(name, 'a2', "'true")
        wb.sort_region(name, 'a1', 'a2', [1])
        self.assertEqual(wb.get_cell_value(name, 'a1'), 'true')
        self.assertEqual(wb.get_cell_value(name, 'a2'), False)

        wb.set_cell_contents(name, 'a1', "'12")
        wb.set_cell_contents(name, 'a2', '12')
        wb.sort_region(name, 'a1', 'a2', [1])
        self.assertEqual(wb.get_cell_value(name, 'a1'), decimal.Decimal('12'))
        self.assertEqual(wb.get_cell_value(name, 'a2'), '12')

        wb.set_cell_contents(name, 'a1', 'true')
        wb.set_cell_contents(name, 'a2', 'false')
        wb.sort_region(name, 'a1', 'a2', [1])
        self.assertEqual(wb.get_cell_value(name, 'a1'), False)
        self.assertEqual(wb.get_cell_value(name, 'a2'), True)

        wb.set_cell_contents(name, 'a1', '2')
        wb.set_cell_contents(name, 'a2', '1')
        wb.sort_region(name, 'a1', 'a2', [1])
        self.assertEqual(wb.get_cell_value(name, 'a1'), decimal.Decimal('1'))
        self.assertEqual(wb.get_cell_value(name, 'a2'), decimal.Decimal('2'))

        wb.set_cell_contents(name, 'a1', '1')
        wb.set_cell_contents(name, 'a2', '2')
        wb.sort_region(name, 'a1', 'a2', [-1])
        self.assertEqual(wb.get_cell_value(name, 'a1'), decimal.Decimal('2'))
        self.assertEqual(wb.get_cell_value(name, 'a2'), decimal.Decimal('1'))

        wb.set_cell_contents(name, 'a1', '1')
        wb.set_cell_contents(name, 'b1', '4')
        wb.set_cell_contents(name, 'a2', '2')
        wb.set_cell_contents(name, 'b2', '3')
        wb.sort_region(name, 'a1', 'a2', [1])
        self.assertEqual(wb.get_cell_value(name, 'a1'), decimal.Decimal('1'))
        self.assertEqual(wb.get_cell_value(name, 'a2'), decimal.Decimal('2'))
        self.assertEqual(wb.get_cell_value(name, 'b1'), decimal.Decimal('4'))
        self.assertEqual(wb.get_cell_value(name, 'b2'), decimal.Decimal('3'))

        wb.set_cell_contents(name, 'a1', '2')
        wb.set_cell_contents(name, 'b1', '4')
        wb.set_cell_contents(name, 'a2', '1')
        wb.set_cell_contents(name, 'b2', '3')
        wb.sort_region(name, 'a1', 'b2', [1])
        self.assertEqual(wb.get_cell_value(name, 'a1'), decimal.Decimal('1'))
        self.assertEqual(wb.get_cell_value(name, 'a2'), decimal.Decimal('2'))
        self.assertEqual(wb.get_cell_value(name, 'b1'), decimal.Decimal('3'))
        self.assertEqual(wb.get_cell_value(name, 'b2'), decimal.Decimal('4'))

        wb.set_cell_contents(name, 'a1', '1')
        wb.set_cell_contents(name, 'b1', '4')
        wb.set_cell_contents(name, 'a2', '2')
        wb.set_cell_contents(name, 'b2', '3')
        wb.sort_region(name, 'a1', 'b2', [-1])
        self.assertEqual(wb.get_cell_value(name, 'a1'), decimal.Decimal('2'))
        self.assertEqual(wb.get_cell_value(name, 'a2'), decimal.Decimal('1'))
        self.assertEqual(wb.get_cell_value(name, 'b1'), decimal.Decimal('3'))
        self.assertEqual(wb.get_cell_value(name, 'b2'), decimal.Decimal('4'))

        wb.set_cell_contents(name, 'a1', '1')
        wb.set_cell_contents(name, 'b1', '4')
        wb.set_cell_contents(name, 'a2', '1')
        wb.set_cell_contents(name, 'b2', '3')
        wb.sort_region(name, 'a1', 'b2', [-1])
        self.assertEqual(wb.get_cell_value(name, 'a1'), decimal.Decimal('1'))
        self.assertEqual(wb.get_cell_value(name, 'a2'), decimal.Decimal('1'))
        self.assertEqual(wb.get_cell_value(name, 'b1'), decimal.Decimal('4'))
        self.assertEqual(wb.get_cell_value(name, 'b2'), decimal.Decimal('3'))

        # testing stable sort
        wb.set_cell_contents(name, 'a1', '1')
        wb.set_cell_contents(name, 'b1', '4')
        wb.set_cell_contents(name, 'a2', '1')
        wb.set_cell_contents(name, 'b2', '3')
        wb.sort_region(name, 'a1', 'b2', [1])
        self.assertEqual(wb.get_cell_value(name, 'a1'), decimal.Decimal('1'))
        self.assertEqual(wb.get_cell_value(name, 'a2'), decimal.Decimal('1'))
        self.assertEqual(wb.get_cell_value(name, 'b1'), decimal.Decimal('4'))
        self.assertEqual(wb.get_cell_value(name, 'b2'), decimal.Decimal('3'))

        wb.set_cell_contents(name, 'a1', '1')
        wb.set_cell_contents(name, 'a2', '2')
        wb.set_cell_contents(name, 'a3', '1')
        wb.set_cell_contents(name, 'b1', '4')
        wb.set_cell_contents(name, 'b2', '3')
        wb.set_cell_contents(name, 'b3', '1')
        wb.sort_region(name, 'a1', 'b3', [1])
        self.assertEqual(wb.get_cell_value(name, 'a1'), decimal.Decimal('1'))
        self.assertEqual(wb.get_cell_value(name, 'a2'), decimal.Decimal('1'))
        self.assertEqual(wb.get_cell_value(name, 'a3'), decimal.Decimal('2'))
        self.assertEqual(wb.get_cell_value(name, 'b1'), decimal.Decimal('4'))
        self.assertEqual(wb.get_cell_value(name, 'b2'), decimal.Decimal('1'))
        self.assertEqual(wb.get_cell_value(name, 'b3'), decimal.Decimal('3'))

    def test_none_sort_ordering(self):
        wb = sheets.Workbook()
        (_, name) = wb.new_sheet()

        # nones
        wb.set_cell_contents(name, 'a1', '#ref!')
        wb.set_cell_contents(name, 'a2', None)
        wb.sort_region(name, 'a1', 'a2', [1])
        value = wb.get_cell_value(name, 'a2')
        self.assertTrue(isinstance(value, sheets.CellError))
        self.assertEqual(value.get_type(), sheets.CellErrorType.BAD_REFERENCE)
        self.assertEqual(wb.get_cell_value(name, 'a1'), None)

        wb.set_cell_contents(name, 'a1', None)
        wb.set_cell_contents(name, 'b1', '2')
        wb.set_cell_contents(name, 'a2', None)
        wb.set_cell_contents(name, 'b2', '1')
        wb.sort_region(name, 'a1', 'a2', [1])
        self.assertEqual(wb.get_cell_value(name, 'a1'), None)
        self.assertEqual(wb.get_cell_value(name, 'b1'), decimal.Decimal('2'))
        self.assertEqual(wb.get_cell_value(name, 'a2'), None)
        self.assertEqual(wb.get_cell_value(name, 'b2'), decimal.Decimal('1'))

        wb.set_cell_contents(name, 'a1', '#ref!')
        wb.set_cell_contents(name, 'a2', None)
        wb.set_cell_contents(name, 'a4', '1')
        wb.sort_region(name, 'a1', 'a4', [1])
        self.assertEqual(wb.get_cell_value(name, 'a1'), None)
        self.assertEqual(wb.get_cell_value(name, 'a2'), None)
        value = wb.get_cell_value(name, 'a3')
        self.assertTrue(isinstance(value, sheets.CellError))
        self.assertEqual(value.get_type(), sheets.CellErrorType.BAD_REFERENCE)
        self.assertEqual(wb.get_cell_value(name, 'a4'), decimal.Decimal('1'))

    def test_error_sort_ordering(self):
        wb = sheets.Workbook()
        (_, name) = wb.new_sheet()
        wb.set_cell_contents(name, 'a1', '#ref!')
        wb.sort_region(name, 'a1', 'a2', [1])
        self.assertEqual(wb.get_cell_value(name, 'a1'), None)
        value = wb.get_cell_value(name, 'a2')
        self.assertTrue(isinstance(value, sheets.CellError))
        self.assertEqual(value.get_type(), sheets.CellErrorType.BAD_REFERENCE)

        wb.set_cell_contents(name, 'a1', '1')
        wb.set_cell_contents(name, 'a2', '#ref!')
        wb.sort_region(name, 'a1', 'a2', [1])
        value = wb.get_cell_value(name, 'a1')
        self.assertTrue(isinstance(value, sheets.CellError))
        self.assertEqual(value.get_type(), sheets.CellErrorType.BAD_REFERENCE)
        self.assertEqual(wb.get_cell_value(name, 'a2'), decimal.Decimal('1'))

        wb.set_cell_contents(name, 'a1', 'false')
        wb.set_cell_contents(name, 'a2', '#ref!')
        wb.sort_region(name, 'a1', 'a2', [1])
        value = wb.get_cell_value(name, 'a1')
        self.assertTrue(isinstance(value, sheets.CellError))
        self.assertEqual(value.get_type(), sheets.CellErrorType.BAD_REFERENCE)
        self.assertEqual(wb.get_cell_value(name, 'a2'), False)

        wb.set_cell_contents(name, 'a1', '#name?')
        wb.set_cell_contents(name, 'a2', '#ref!')
        wb.sort_region(name, 'a1', 'a2', [1])
        value = wb.get_cell_value(name, 'a1')
        self.assertTrue(isinstance(value, sheets.CellError))
        self.assertEqual(value.get_type(), sheets.CellErrorType.BAD_REFERENCE)
        value = wb.get_cell_value(name, 'a2')
        self.assertTrue(isinstance(value, sheets.CellError))
        self.assertEqual(value.get_type(), sheets.CellErrorType.BAD_NAME)
       

    def test_sort_functions(self):
        wb = sheets.Workbook()
        (_, name) = wb.new_sheet()
        wb.set_cell_contents(name, 'A1', '1')
        wb.set_cell_contents(name, 'a3', '=AND(A1 < A2, A2 < A4)')
        wb.set_cell_contents(name, 'a2', '2')
        wb.set_cell_contents(name, 'a4', "3")
        wb.sort_region(name, 'a1', 'a4', [-1])
        value = wb.get_cell_value(name, 'a1')
        self.assertTrue(isinstance(value, sheets.CellError))
        self.assertEqual(value.get_type(), sheets.CellErrorType.BAD_REFERENCE)
        self.assertEqual(wb.get_cell_value(name, 'a2'), decimal.Decimal('3'))
        self.assertEqual(wb.get_cell_value(name, 'a3'), decimal.Decimal('2'))
        self.assertEqual(wb.get_cell_value(name, 'a4'), decimal.Decimal('1'))

        wb.set_cell_contents(name, 'A1', '3')
        wb.set_cell_contents(name, 'a3', '=AND(A1 < A2, A2 < A4)')
        wb.set_cell_contents(name, 'a2', '2')
        wb.set_cell_contents(name, 'a4', "1")
        wb.sort_region(name, 'a1', 'a4', [1])
        self.assertEqual(wb.get_cell_value(name, 'a1'), decimal.Decimal('1'))
        self.assertEqual(wb.get_cell_value(name, 'a2'), decimal.Decimal('2'))
        self.assertEqual(wb.get_cell_value(name, 'a3'), decimal.Decimal('3'))
        self.assertEqual(wb.get_cell_value(name, 'a4'), False)


    def test_multiple_sort_cols(self):
        wb = sheets.Workbook()
        (_, name) = wb.new_sheet()
        wb.set_cell_contents(name, 'a1', '1')
        wb.set_cell_contents(name, 'a2', '2')
        wb.set_cell_contents(name, 'a3', '1')
        wb.set_cell_contents(name, 'b1', '4')
        wb.set_cell_contents(name, 'b2', '3')
        wb.set_cell_contents(name, 'b3', '1')
        wb.sort_region(name, 'a1', 'b3', [1, 2])
        self.assertEqual(wb.get_cell_value(name, 'a1'), decimal.Decimal('1'))
        self.assertEqual(wb.get_cell_value(name, 'a2'), decimal.Decimal('1'))
        self.assertEqual(wb.get_cell_value(name, 'a3'), decimal.Decimal('2'))
        self.assertEqual(wb.get_cell_value(name, 'b1'), decimal.Decimal('1'))
        self.assertEqual(wb.get_cell_value(name, 'b2'), decimal.Decimal('4'))
        self.assertEqual(wb.get_cell_value(name, 'b3'), decimal.Decimal('3'))

        wb.set_cell_contents(name, 'a1', '1')
        wb.set_cell_contents(name, 'a2', '2')
        wb.set_cell_contents(name, 'a3', '1')
        wb.set_cell_contents(name, 'b1', '4')
        wb.set_cell_contents(name, 'b2', '3')
        wb.set_cell_contents(name, 'b3', '1')
        wb.sort_region(name, 'a1', 'b3', [1, -2])
        self.assertEqual(wb.get_cell_value(name, 'a1'), decimal.Decimal('1'))
        self.assertEqual(wb.get_cell_value(name, 'a2'), decimal.Decimal('1'))
        self.assertEqual(wb.get_cell_value(name, 'a3'), decimal.Decimal('2'))
        self.assertEqual(wb.get_cell_value(name, 'b1'), decimal.Decimal('4'))
        self.assertEqual(wb.get_cell_value(name, 'b2'), decimal.Decimal('1'))
        self.assertEqual(wb.get_cell_value(name, 'b3'), decimal.Decimal('3'))

        wb.set_cell_contents(name, 'a1', '1')
        wb.set_cell_contents(name, 'a2', '2')
        wb.set_cell_contents(name, 'a3', '1')
        wb.set_cell_contents(name, 'b1', '4')
        wb.set_cell_contents(name, 'b2', '3')
        wb.set_cell_contents(name, 'b3', '1')
        wb.sort_region(name, 'a1', 'b3', [-1, 2])
        self.assertEqual(wb.get_cell_value(name, 'a1'), decimal.Decimal('2'))
        self.assertEqual(wb.get_cell_value(name, 'a2'), decimal.Decimal('1'))
        self.assertEqual(wb.get_cell_value(name, 'a3'), decimal.Decimal('1'))
        self.assertEqual(wb.get_cell_value(name, 'b1'), decimal.Decimal('3'))
        self.assertEqual(wb.get_cell_value(name, 'b2'), decimal.Decimal('1'))
        self.assertEqual(wb.get_cell_value(name, 'b3'), decimal.Decimal('4'))

        wb.set_cell_contents(name, 'a1', '1')
        wb.set_cell_contents(name, 'a2', '2')
        wb.set_cell_contents(name, 'a3', '1')
        wb.set_cell_contents(name, 'b1', '4')
        wb.set_cell_contents(name, 'b2', '3')
        wb.set_cell_contents(name, 'b3', '1')
        wb.sort_region(name, 'a1', 'b3', [2, 1])
        self.assertEqual(wb.get_cell_value(name, 'a1'), decimal.Decimal('1'))
        self.assertEqual(wb.get_cell_value(name, 'a2'), decimal.Decimal('2'))
        self.assertEqual(wb.get_cell_value(name, 'a3'), decimal.Decimal('1'))
        self.assertEqual(wb.get_cell_value(name, 'b1'), decimal.Decimal('1'))
        self.assertEqual(wb.get_cell_value(name, 'b2'), decimal.Decimal('3'))
        self.assertEqual(wb.get_cell_value(name, 'b3'), decimal.Decimal('4'))

        # opposite corners
        wb.set_cell_contents(name, 'a1', '1')
        wb.set_cell_contents(name, 'a2', '2')
        wb.set_cell_contents(name, 'a3', '1')
        wb.set_cell_contents(name, 'b1', '4')
        wb.set_cell_contents(name, 'b2', '3')
        wb.set_cell_contents(name, 'b3', '1')
        wb.sort_region(name.upper(), 'b3', 'a1', [1, 2])
        self.assertEqual(wb.get_cell_value(name, 'a1'), decimal.Decimal('1'))
        self.assertEqual(wb.get_cell_value(name, 'a2'), decimal.Decimal('1'))
        self.assertEqual(wb.get_cell_value(name, 'a3'), decimal.Decimal('2'))
        self.assertEqual(wb.get_cell_value(name, 'b1'), decimal.Decimal('1'))
        self.assertEqual(wb.get_cell_value(name, 'b2'), decimal.Decimal('4'))
        self.assertEqual(wb.get_cell_value(name, 'b3'), decimal.Decimal('3'))

    def test_sort_errors(self):
        wb = sheets.Workbook()
        (_, name) = wb.new_sheet()
        wb.set_cell_contents(name, 'a1', '1')
        wb.set_cell_contents(name, 'a2', '2')
        wb.set_cell_contents(name, 'a3', '1')
        wb.set_cell_contents(name, 'b1', '4')
        wb.set_cell_contents(name, 'b2', '3')
        wb.set_cell_contents(name, 'b3', '1')
        self.assertRaises(ValueError, wb.sort_region, name, 'a1', 'b3', [1, 2, 1])
        self.assertRaises(ValueError, wb.sort_region, name, 'a1', 'b3', [2, -2])
        self.assertRaises(ValueError, wb.sort_region, name, 'a1', 'b3', [])
        self.assertRaises(ValueError, wb.sort_region, name, 'a1', 'b3', [0, 1])
        self.assertRaises(ValueError, wb.sort_region, name, 'a1', 'b3', [1, 3])
        self.assertRaises(ValueError, wb.sort_region, name, 'a1', 'b3', [3])
        self.assertRaises(ValueError, wb.sort_region, name, 'a1', 'b3', [-3])
        self.assertRaises(KeyError, wb.sort_region, 'hello', 'a1', 'b3', [1])


if __name__ == '__main__':
    unittest.main()
