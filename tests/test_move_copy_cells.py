import decimal
import unittest
import sheets


class TestMoveCopyCells(unittest.TestCase):
    '''
    This class contains the tests relating to the workbook move and copy cells
    relating to project 3.
    '''
    def test_move_cells(self):
        wb = sheets.Workbook()
        (_, name) = wb.new_sheet()
        (_, name2) = wb.new_sheet()
        wb.set_cell_contents(name, 'a1', "'123")
        wb.set_cell_contents(name, 'b1', '5.3')
        wb.set_cell_contents(name, 'c1', '=a1*b1')
        wb.move_cells(name.upper(), 'a1', 'C1', 'a2')
        self.assertEqual(wb.get_cell_contents(name, 'a1'), None)
        self.assertEqual(wb.get_cell_contents(name, 'b1'), None)
        self.assertEqual(wb.get_cell_contents(name, 'c1'), None)
        self.assertEqual(wb.get_cell_contents(name, 'a2'), "'123")
        self.assertEqual(wb.get_cell_contents(name, 'b2'), '5.3')
        self.assertEqual(wb.get_cell_contents(name, 'c2'), '=A2*B2')

        wb.move_cells(name, 'a2', 'a2', 'a2')
        self.assertEqual(wb.get_cell_contents(name, 'a2'), "'123")
        self.assertEqual(wb.get_cell_contents(name, 'b2'), '5.3')
        self.assertEqual(wb.get_cell_contents(name, 'c2'), '=A2*B2')

        wb.set_cell_contents(name, 'a1', "5")
        wb.set_cell_contents(name, 'b1', '10')
        wb.set_cell_contents(name, 'c1', '=A1*b1')
        wb.set_cell_contents(name, 'a2', "4")
        wb.set_cell_contents(name, 'b2', '9')
        wb.set_cell_contents(name, 'c2', '=a2*B2')
        wb.move_cells(name, 'c1', 'C2', 'b1')
        self.assertEqual(wb.get_cell_value(name, 'a1'), decimal.Decimal(5))
        self.assertEqual(wb.get_cell_contents(name, 'b1'), '=#REF!*A1')
        self.assertEqual(wb.get_cell_contents(name, 'c1'), None)
        self.assertEqual(wb.get_cell_contents(name, 'a2'), "4")
        self.assertEqual(wb.get_cell_contents(name, 'b2'), '=#REF!*A2')
        self.assertEqual(wb.get_cell_contents(name, 'c2'), None)

        wb.set_cell_contents(name2, 'a1', "5")
        wb.set_cell_contents(name2, 'b1', '10')
        wb.set_cell_contents(name2, 'c1', '=A1*b1')
        wb.set_cell_contents(name2, 'a2', "4")
        wb.set_cell_contents(name2, 'b2', None)
        wb.set_cell_contents(name2, 'c2', '=a2*B2')
        wb.set_cell_contents(name2, 'd3', '15')
        wb.move_cells(name2, 'a1', 'd2', 'c2')
        self.assertEqual(wb.get_cell_value(name2, 'a1'), None)
        self.assertEqual(wb.get_cell_contents(name2, 'b1'), None)
        self.assertEqual(wb.get_cell_contents(name2, 'c1'), None)
        self.assertEqual(wb.get_cell_contents(name2, 'a2'), None)
        self.assertEqual(wb.get_cell_contents(name2, 'b2'), None)
        self.assertEqual(wb.get_cell_contents(name2, 'c2'), '5')
        self.assertEqual(wb.get_cell_contents(name2, 'c3'), '4')
        self.assertEqual(wb.get_cell_contents(name2, 'd2'), '10')
        self.assertEqual(wb.get_cell_contents(name2, 'd3'), None)
        self.assertEqual(wb.get_cell_contents(name2, 'e2'), '=C2*D2')
        self.assertEqual(wb.get_cell_contents(name2, 'e3'), '=C3*D3')

        # test overlap
        wb.set_cell_contents(name2, 'a1', "5")
        wb.set_cell_contents(name2, 'b1', '10')
        wb.set_cell_contents(name2, 'c1', '=A1*b1')
        wb.set_cell_contents(name2, 'a2', "4")
        wb.set_cell_contents(name2, 'b2', '9')
        wb.set_cell_contents(name2, 'c2', '=a2*B2')
        wb.move_cells(name2, 'a1', 'd2', 'b2')
        self.assertEqual(wb.get_cell_value(name2, 'a1'), None)
        self.assertEqual(wb.get_cell_contents(name2, 'b1'), None)
        self.assertEqual(wb.get_cell_contents(name2, 'c1'), None)
        self.assertEqual(wb.get_cell_contents(name2, 'a2'), None)
        self.assertEqual(wb.get_cell_contents(name2, 'b2'), '5')
        self.assertEqual(wb.get_cell_contents(name2, 'c2'), '10')
        self.assertEqual(wb.get_cell_contents(name2, 'd2'), '=B2*C2')
        self.assertEqual(wb.get_cell_contents(name2, 'b3'), '4')
        self.assertEqual(wb.get_cell_contents(name2, 'c3'), '9')
        self.assertEqual(wb.get_cell_contents(name2, 'd3'), '=B3*C3')

        # testing top right corner and bottom left
        wb.set_cell_contents(name, 'a1', "5")
        wb.set_cell_contents(name, 'b1', '10')
        wb.set_cell_contents(name, 'c1', '=A1*b1')
        wb.set_cell_contents(name, 'a2', "4")
        wb.set_cell_contents(name, 'b2', '9')
        wb.set_cell_contents(name, 'c2', '=a2*B2')
        wb.move_cells(name, 'c2', 'a1', 'c2')
        self.assertEqual(wb.get_cell_value(name, 'a1'), None)
        self.assertEqual(wb.get_cell_contents(name, 'b1'), None)
        self.assertEqual(wb.get_cell_contents(name, 'c1'), None)
        self.assertEqual(wb.get_cell_contents(name, 'a2'), None)
        self.assertEqual(wb.get_cell_contents(name, 'b2'), None)
        self.assertEqual(wb.get_cell_contents(name, 'c2'), '5')
        self.assertEqual(wb.get_cell_contents(name, 'c3'), '4')
        self.assertEqual(wb.get_cell_contents(name, 'd2'), '10')
        self.assertEqual(wb.get_cell_contents(name, 'd3'), '9')
        self.assertEqual(wb.get_cell_contents(name, 'e2'), '=C2*D2')
        self.assertEqual(wb.get_cell_contents(name, 'e3'), '=C3*D3')

        self.assertRaises(ValueError, wb.move_cells, name, 'c2', 'e3', 'zzzy9998')
        wb.move_cells(name, 'c2', 'e3', 'zzzx9998')
        self.assertEqual(wb.get_cell_contents(name, 'zzzx9998'), '5')
        self.assertEqual(wb.get_cell_contents(name, 'zzzx9999'), '4')
        self.assertEqual(wb.get_cell_contents(name, 'zzzy9998'), '10')
        self.assertEqual(wb.get_cell_contents(name, 'zzzy9999'), '9')
        self.assertEqual(wb.get_cell_contents(name, 'zzzz9998'), '=ZZZX9998*ZZZY9998')
        self.assertEqual(wb.get_cell_contents(name, 'zzzz9999'), '=ZZZX9999*ZZZY9999')

    def test_move_cells_across_sheets(self):
        wb = sheets.Workbook()
        (_, name) = wb.new_sheet()
        (_, name2) = wb.new_sheet()
        wb.set_cell_contents(name, 'a1', "'123")
        wb.set_cell_contents(name, 'b1', '5.3')
        wb.set_cell_contents(name, 'c1', '=a1*b1')
        wb.move_cells(name, 'a1', 'C1', 'a2', name2.upper())
        self.assertEqual(wb.get_cell_contents(name, 'a1'), None)
        self.assertEqual(wb.get_cell_contents(name, 'b1'), None)
        self.assertEqual(wb.get_cell_contents(name, 'c1'), None)
        self.assertEqual(wb.get_cell_contents(name2, 'a2'), "'123")
        self.assertEqual(wb.get_cell_contents(name2, 'b2'), '5.3')
        self.assertEqual(wb.get_cell_contents(name2, 'c2'), '=A2*B2')
        self.assertEqual(wb.get_cell_value(name2, 'a2'), '123')
        self.assertEqual(wb.get_cell_value(name2, 'b2'), decimal.Decimal('5.3'))
        self.assertEqual(wb.get_cell_value(name2, 'c2'), decimal.Decimal('651.9'))

        wb.set_cell_contents(name, 'a1', "'123")
        wb.set_cell_contents(name, 'b1', '5.3')
        wb.set_cell_contents(name, 'c1', '=a1*b1')
        wb.move_cells(name, 'c1', 'C1', 'a1', name2.upper())
        self.assertEqual(wb.get_cell_contents(name, 'a1'), "'123")
        self.assertEqual(wb.get_cell_contents(name, 'b1'), '5.3')
        self.assertEqual(wb.get_cell_contents(name, 'c1'), None)
        self.assertEqual(wb.get_cell_contents(name2, 'a1'), "=#REF!*#REF!")
        self.assertEqual(wb.get_cell_contents(name2, 'b1'), None)
        self.assertEqual(wb.get_cell_contents(name2, 'c1'), None)

        wb.set_cell_contents(name, 'c1', '=a1*b1')
        wb.move_cells(name, 'c1', 'C1', 'b1', name2.upper())
        self.assertEqual(wb.get_cell_contents(name, 'a1'), "'123")
        self.assertEqual(wb.get_cell_contents(name, 'b1'), '5.3')
        self.assertEqual(wb.get_cell_contents(name, 'c1'), None)
        self.assertEqual(wb.get_cell_contents(name2, 'a1'), "=#REF!*#REF!")
        self.assertEqual(wb.get_cell_contents(name2, 'b1'), "=#REF!*A1")
        self.assertEqual(wb.get_cell_contents(name2, 'c1'), None)

        wb.set_cell_contents(name, 'c1', '=a1*b1')
        wb.move_cells(name, 'c1', 'C1', 'c1', name2.upper())
        self.assertEqual(wb.get_cell_contents(name, 'a1'), "'123")
        self.assertEqual(wb.get_cell_contents(name, 'b1'), '5.3')
        self.assertEqual(wb.get_cell_contents(name, 'c1'), None)
        self.assertEqual(wb.get_cell_contents(name2, 'a1'), "=#REF!*#REF!")
        self.assertEqual(wb.get_cell_contents(name2, 'b1'), "=#REF!*A1")
        self.assertEqual(wb.get_cell_contents(name2, 'c1'), "=A1*B1")

    def test_move_cells_sheet_references(self):
        wb = sheets.Workbook()
        (_, name) = wb.new_sheet()
        wb.set_cell_contents(name, 'c1', "=Sheet1!A1*B1")
        wb.move_cells(name, 'c1', 'c1', 'b1')
        self.assertEqual(wb.get_cell_contents(name, 'c1'), None)
        self.assertEqual(wb.get_cell_contents(name, 'b1'), '=#REF!*A1')
        value = wb.get_cell_value(name, 'b1')
        self.assertTrue(isinstance(value, sheets.CellError))
        self.assertEqual(value.get_type(), sheets.CellErrorType.BAD_REFERENCE)

        name2 = 'sheet 2'
        wb.new_sheet(name2)
        wb.set_cell_contents(name, 'c1', f"='{name2}'!A1*B1")
        wb.move_cells(name, 'c1', 'c1', 'b1')
        self.assertEqual(wb.get_cell_contents(name, 'a1'), None)
        self.assertEqual(wb.get_cell_contents(name, 'b1'), '=#REF!*A1')
        value = wb.get_cell_value(name, 'b1')
        self.assertTrue(isinstance(value, sheets.CellError))
        self.assertEqual(value.get_type(), sheets.CellErrorType.BAD_REFERENCE)

    def test_move_copy_dollar_signs(self):
        wb = sheets.Workbook()
        (_, name) = wb.new_sheet()
        (_, name2) = wb.new_sheet()
        wb.set_cell_contents(name, 'a1', "'123")
        wb.set_cell_contents(name, 'b1', '5.3')
        wb.set_cell_contents(name, 'c1', '=$a1*b$1')
        wb.move_cells(name.upper(), 'a1', 'C1', 'a2')
        self.assertEqual(wb.get_cell_contents(name, 'a1'), None)
        self.assertEqual(wb.get_cell_contents(name, 'b1'), None)
        self.assertEqual(wb.get_cell_contents(name, 'c1'), None)
        self.assertEqual(wb.get_cell_contents(name, 'a2'), "'123")
        self.assertEqual(wb.get_cell_contents(name, 'b2'), '5.3')
        self.assertEqual(wb.get_cell_contents(name, 'c2'), '=$A2*B$1')

        wb.set_cell_contents(name, 'a1', "5")
        wb.set_cell_contents(name, 'b1', '10')
        wb.set_cell_contents(name, 'c1', '=$A1*b1')
        wb.set_cell_contents(name, 'a2', "4")
        wb.set_cell_contents(name, 'b2', '9')
        wb.set_cell_contents(name, 'c2', '=a2*$B2')
        wb.move_cells(name, 'c1', 'C2', 'b1')
        self.assertEqual(wb.get_cell_value(name, 'a1'), decimal.Decimal(5))
        self.assertEqual(wb.get_cell_contents(name, 'b1'), '=$A1*A1')
        self.assertEqual(wb.get_cell_contents(name, 'c1'), None)
        self.assertEqual(wb.get_cell_contents(name, 'a2'), "4")
        self.assertEqual(wb.get_cell_contents(name, 'b2'), '=#REF!*$B2')
        self.assertEqual(wb.get_cell_contents(name, 'c2'), None)

        wb.set_cell_contents(name2, 'a1', "5")
        wb.set_cell_contents(name2, 'b1', '10')
        wb.set_cell_contents(name2, 'c1', '=$A$1*b1')
        wb.set_cell_contents(name2, 'a2', "4")
        wb.set_cell_contents(name2, 'b2', None)
        wb.set_cell_contents(name2, 'c2', '=a2*$B2')
        wb.set_cell_contents(name2, 'd3', '15')
        wb.move_cells(name2, 'a1', 'd2', 'c2')
        self.assertEqual(wb.get_cell_value(name2, 'a1'), None)
        self.assertEqual(wb.get_cell_contents(name2, 'b1'), None)
        self.assertEqual(wb.get_cell_contents(name2, 'c1'), None)
        self.assertEqual(wb.get_cell_contents(name2, 'a2'), None)
        self.assertEqual(wb.get_cell_contents(name2, 'b2'), None)
        self.assertEqual(wb.get_cell_contents(name2, 'c2'), '5')
        self.assertEqual(wb.get_cell_contents(name2, 'c3'), '4')
        self.assertEqual(wb.get_cell_contents(name2, 'd2'), '10')
        self.assertEqual(wb.get_cell_contents(name2, 'd3'), None)
        self.assertEqual(wb.get_cell_contents(name2, 'e2'), '=$A$1*D2')
        self.assertEqual(wb.get_cell_contents(name2, 'e3'), '=C3*$B3')

        wb.set_cell_contents(name2, 'a1', "5")
        wb.set_cell_contents(name2, 'b1', '10')
        wb.set_cell_contents(name2, 'a2', "4")
        # columns
        wb.set_cell_contents(name2, 'f1', "=$a1")
        # right
        wb.move_cells(name2, 'f1', 'f1', 'g1')
        self.assertEqual(wb.get_cell_contents(name2, 'f1'), None)
        self.assertEqual(wb.get_cell_contents(name2, 'g1'), '=$A1')
        self.assertEqual(wb.get_cell_value(name2, 'f1'), None)
        self.assertEqual(wb.get_cell_value(name2, 'g1'), decimal.Decimal('5'))
        # left
        wb.move_cells(name2, 'g1', 'g1', 'f1')
        self.assertEqual(wb.get_cell_contents(name2, 'g1'), None)
        self.assertEqual(wb.get_cell_contents(name2, 'f1'), '=$A1')
        self.assertEqual(wb.get_cell_value(name2, 'f1'), decimal.Decimal('5'))
        self.assertEqual(wb.get_cell_value(name2, 'g1'), None)
        # down
        wb.move_cells(name2, 'f1', 'f1', 'f2')
        self.assertEqual(wb.get_cell_contents(name2, 'f1'), None)
        self.assertEqual(wb.get_cell_contents(name2, 'f2'), '=$A2')
        self.assertEqual(wb.get_cell_value(name2, 'f2'), decimal.Decimal('4'))
        self.assertEqual(wb.get_cell_value(name2, 'f1'), None)
        # up
        wb.move_cells(name2, 'f2', 'f2', 'f1')
        self.assertEqual(wb.get_cell_contents(name2, 'f2'), None)
        self.assertEqual(wb.get_cell_contents(name2, 'f1'), '=$A1')
        self.assertEqual(wb.get_cell_value(name2, 'f1'), decimal.Decimal('5'))
        self.assertEqual(wb.get_cell_value(name2, 'f2'), None)

        self.assertRaises(ValueError, wb.move_cells, name2, 'f1', 'f1', 'f0')
        # self.assertEqual(wb.get_cell_contents(name2, 'f2'), None)
        # self.assertEqual(wb.get_cell_contents(name2, 'f1'), '=$A1')
        # self.assertEqual(wb.get_cell_value(name2, 'f1'), decimal.Decimal('5'))
        # self.assertEqual(wb.get_cell_value(name2, 'f2'), None)

        # rows
        wb.set_cell_contents(name2, 'f1', "=a$1")
        # right
        wb.move_cells(name2, 'f1', 'f1', 'g1')
        self.assertEqual(wb.get_cell_contents(name2, 'f1'), None)
        self.assertEqual(wb.get_cell_contents(name2, 'g1'), '=B$1')
        self.assertEqual(wb.get_cell_value(name2, 'f1'), None)
        self.assertEqual(wb.get_cell_value(name2, 'g1'), decimal.Decimal('10'))
        # left
        wb.move_cells(name2, 'g1', 'g1', 'f1')
        self.assertEqual(wb.get_cell_contents(name2, 'g1'), None)
        self.assertEqual(wb.get_cell_contents(name2, 'f1'), '=A$1')
        self.assertEqual(wb.get_cell_value(name2, 'g1'), None)
        self.assertEqual(wb.get_cell_value(name2, 'f1'), decimal.Decimal('5'))
        # down
        wb.move_cells(name2, 'f1', 'f1', 'f2')
        self.assertEqual(wb.get_cell_contents(name2, 'f1'), None)
        self.assertEqual(wb.get_cell_contents(name2, 'f2'), '=A$1')
        self.assertEqual(wb.get_cell_value(name2, 'f1'), None)
        self.assertEqual(wb.get_cell_value(name2, 'f2'), decimal.Decimal('5'))
        # up
        wb.move_cells(name2, 'f2', 'f2', 'f1')
        self.assertEqual(wb.get_cell_contents(name2, 'f2'), None)
        self.assertEqual(wb.get_cell_contents(name2, 'f1'), '=A$1')
        self.assertEqual(wb.get_cell_value(name2, 'f2'), None)
        self.assertEqual(wb.get_cell_value(name2, 'f1'), decimal.Decimal('5'))

        # both rows and cols
        wb.set_cell_contents(name2, 'f1', "=$a$1")
        # right
        wb.move_cells(name2, 'f1', 'f1', 'g1')
        self.assertEqual(wb.get_cell_contents(name2, 'f1'), None)
        self.assertEqual(wb.get_cell_contents(name2, 'g1'), '=$A$1')
        self.assertEqual(wb.get_cell_value(name2, 'f1'), None)
        self.assertEqual(wb.get_cell_value(name2, 'g1'), decimal.Decimal('5'))
        # left
        wb.move_cells(name2, 'g1', 'g1', 'f1')
        self.assertEqual(wb.get_cell_contents(name2, 'g1'), None)
        self.assertEqual(wb.get_cell_contents(name2, 'f1'), '=$A$1')
        self.assertEqual(wb.get_cell_value(name2, 'g1'), None)
        self.assertEqual(wb.get_cell_value(name2, 'f1'), decimal.Decimal('5'))
        # down
        wb.move_cells(name2, 'f1', 'f1', 'f2')
        self.assertEqual(wb.get_cell_contents(name2, 'f1'), None)
        self.assertEqual(wb.get_cell_contents(name2, 'f2'), '=$A$1')
        self.assertEqual(wb.get_cell_value(name2, 'f1'), None)
        self.assertEqual(wb.get_cell_value(name2, 'f2'), decimal.Decimal('5'))
        # up
        wb.move_cells(name2, 'f2', 'f2', 'f1')
        self.assertEqual(wb.get_cell_contents(name2, 'f2'), None)
        self.assertEqual(wb.get_cell_contents(name2, 'f1'), '=$A$1')
        self.assertEqual(wb.get_cell_value(name2, 'f2'), None)
        self.assertEqual(wb.get_cell_value(name2, 'f1'), decimal.Decimal('5'))

    def test_move_cells_sheet_dollar_references(self):
        wb = sheets.Workbook()
        (_, name) = wb.new_sheet()
        (_, name2) = wb.new_sheet() 
        wb.set_cell_contents(name, 'c1', "=Sheet1!$A1*B1")
        wb.move_cells(name, 'c1', 'c1', 'b1')
        self.assertEqual(wb.get_cell_contents(name, 'c1'), None)
        self.assertEqual(wb.get_cell_contents(name, 'b1'), '=sheet1!$A1*A1')

        wb.set_cell_contents(name2, 'c1', "=Sheet1!$A1*B1")
        wb.move_cells(name2, 'c1', 'c1', 'd1')
        self.assertEqual(wb.get_cell_contents(name2, 'c1'), None)
        self.assertEqual(wb.get_cell_contents(name2, 'd1'), "=sheet1!$A1*C1")

        wb.copy_cells(name2, 'd1', 'd1', 'e1')
        self.assertEqual(wb.get_cell_contents(name2, 'd1'), "=sheet1!$A1*C1")
        self.assertEqual(wb.get_cell_contents(name2, 'e1'), "=sheet1!$A1*D1")

        name2 = 'sheet 2'
        wb.new_sheet(name2)
        wb.set_cell_contents(name, 'c1', f"='{name2}'!$A1*B1")
        wb.move_cells(name, 'c1', 'c1', 'b1')
        self.assertEqual(wb.get_cell_contents(name, 'a1'), None)
        self.assertEqual(wb.get_cell_contents(name, 'b1'), f"='{name2}'!$A1*A1")

    def test_copy_cells(self):
        wb = sheets.Workbook()
        (_, name) = wb.new_sheet()
        (_, name2) = wb.new_sheet()
        wb.set_cell_contents(name, 'a1', "'123")
        wb.set_cell_contents(name, 'b1', '5.3')
        wb.set_cell_contents(name, 'c1', '=a1*b1')
        wb.copy_cells(name, 'a1', 'C1', 'a2', name2.upper())
        self.assertEqual(wb.get_cell_contents(name, 'a1'), "'123")
        self.assertEqual(wb.get_cell_contents(name, 'b1'), '5.3')
        self.assertEqual(wb.get_cell_contents(name, 'c1'), '=a1*b1')
        self.assertEqual(wb.get_cell_contents(name2, 'a2'), "'123")
        self.assertEqual(wb.get_cell_contents(name2, 'b2'), '5.3')
        self.assertEqual(wb.get_cell_contents(name2, 'c2'), '=A2*B2')
        self.assertEqual(wb.get_cell_value(name2, 'a2'), '123')
        self.assertEqual(wb.get_cell_value(name2, 'b2'), decimal.Decimal('5.3'))
        self.assertEqual(wb.get_cell_value(name2, 'c2'), decimal.Decimal('651.9'))

        wb.copy_cells(name, 'a1', 'C1', 'a2')
        self.assertEqual(wb.get_cell_contents(name, 'a1'), "'123")
        self.assertEqual(wb.get_cell_contents(name, 'b1'), '5.3')
        self.assertEqual(wb.get_cell_contents(name, 'c1'), '=a1*b1')
        self.assertEqual(wb.get_cell_contents(name, 'a2'), "'123")
        self.assertEqual(wb.get_cell_contents(name, 'b2'), '5.3')
        self.assertEqual(wb.get_cell_contents(name, 'c2'), '=A2*B2')
        self.assertEqual(wb.get_cell_value(name, 'a2'), '123')
        self.assertEqual(wb.get_cell_value(name, 'b2'), decimal.Decimal('5.3'))
        self.assertEqual(wb.get_cell_value(name, 'c2'), decimal.Decimal('651.9'))

        wb.set_cell_contents(name2, 'a1', "'123")
        wb.set_cell_contents(name2, 'b1', '5.3')
        wb.set_cell_contents(name2, 'c1', '=a1*b1')
        wb.copy_cells(name2, 'a1', 'C1', 'b2')
        self.assertEqual(wb.get_cell_contents(name2, 'a1'), "'123")
        self.assertEqual(wb.get_cell_contents(name2, 'b1'), '5.3')
        self.assertEqual(wb.get_cell_contents(name2, 'c1'), '=a1*b1')
        self.assertEqual(wb.get_cell_contents(name2, 'b2'), "'123")
        self.assertEqual(wb.get_cell_contents(name2, 'c2'), '5.3')
        self.assertEqual(wb.get_cell_contents(name2, 'd2'), '=B2*C2')

    def test_copy_cells_sheet_references(self):
        wb = sheets.Workbook()
        (_, name) = wb.new_sheet()
        (_, _) = wb.new_sheet()
        wb.set_cell_contents(name, 'c1', "=Sheet1!A1*B1")
        wb.copy_cells(name, 'c1', 'c1', 'b1')
        self.assertEqual(wb.get_cell_contents(name, 'a1'), None)
        self.assertEqual(wb.get_cell_contents(name, 'b1'), '=#REF!*A1')
        self.assertEqual(wb.get_cell_contents(name, 'c1'), '=Sheet1!A1*B1')
        value = wb.get_cell_value(name, 'b1')
        self.assertTrue(isinstance(value, sheets.CellError))
        self.assertEqual(value.get_type(), sheets.CellErrorType.BAD_REFERENCE)
        value = wb.get_cell_value(name, 'c1')
        self.assertTrue(isinstance(value, sheets.CellError))
        self.assertEqual(value.get_type(), sheets.CellErrorType.BAD_REFERENCE)

if __name__ == '__main__':
    unittest.main()
