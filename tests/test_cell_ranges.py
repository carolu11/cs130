import unittest
import decimal
import sheets

class TestCellRanges(unittest.TestCase):
    def test_cell_range_errors(self):
        wb = sheets.Workbook()
        (_, name) = wb.new_sheet()
        wb.set_cell_contents(name, 'a1', '=EXACT(A2:A5, B2:B5)')
        value = wb.get_cell_value(name, 'a1')
        self.assertTrue(isinstance(value, sheets.CellError))
        self.assertEqual(value.get_type(), sheets.CellErrorType.TYPE_ERROR)

        wb.set_cell_contents(name, 'a1', '=AND(1, B2:B5)')
        value = wb.get_cell_value(name, 'a1')
        self.assertTrue(isinstance(value, sheets.CellError))
        self.assertEqual(value.get_type(), sheets.CellErrorType.TYPE_ERROR)

        wb.set_cell_contents(name, 'a1', '=OR(1, B2:B5)')
        value = wb.get_cell_value(name, 'a1')
        self.assertTrue(isinstance(value, sheets.CellError))
        self.assertEqual(value.get_type(), sheets.CellErrorType.TYPE_ERROR)

        wb.set_cell_contents(name, 'a1', '=XOR(1, B2:B5)')
        value = wb.get_cell_value(name, 'a1')
        self.assertTrue(isinstance(value, sheets.CellError))
        self.assertEqual(value.get_type(), sheets.CellErrorType.TYPE_ERROR)

    def test_min_function(self):
        wb = sheets.Workbook()
        (_, name) = wb.new_sheet()
        wb.set_cell_contents(name, 'a1', '4')
        wb.set_cell_contents(name, 'a2', '3')
        wb.set_cell_contents(name, 'a4', '5')
        wb.set_cell_contents(name, 'a5', '3')
        wb.set_cell_contents(name, 'a6', 'true')
        wb.set_cell_contents(name, 'a9', '-1')
        wb.set_cell_contents(name, 'a7', '=MIN(a1:a6)')
        self.assertEqual(wb.get_cell_value(name, 'a6'), decimal.Decimal('1'))

        #print('before')
        wb.set_cell_contents(name, 'a7', '=MIN(a1:a6, a9)')
        #print(wb.get_cell_value(name, 'a6'))
        #print(wb.sheets[name.lower()].cells)
        self.assertEqual(wb.get_cell_value(name, 'a7'), decimal.Decimal('-1'))

        #print('after')
        wb.set_cell_contents(name, 'a7', '=MIN(a9, a1:a6)')
        self.assertEqual(wb.get_cell_value(name, 'a7'), decimal.Decimal('-1'))

        wb.set_cell_contents(name, 'a9', None)
        wb.set_cell_contents(name, 'a7', '=MIN(a1:a6, a9)')
        self.assertEqual(wb.get_cell_value(name, 'a7'), decimal.Decimal('1'))
        wb.set_cell_contents(name, 'a7', '=MIN(a9, a1:a6)')
        self.assertEqual(wb.get_cell_value(name, 'a7'), decimal.Decimal('1'))

        wb.set_cell_contents(name, 'a6', '=MIN(a5:a1)')
        self.assertEqual(wb.get_cell_value(name, 'a6'), decimal.Decimal('3'))

        wb.set_cell_contents(name, 'a6', f'=MIN({name}!a1:a5)')
        self.assertEqual(wb.get_cell_value(name, 'a6'), decimal.Decimal('3'))

        wb.set_cell_contents(name, 'a1', None)
        wb.set_cell_contents(name, 'a2', None)
        wb.set_cell_contents(name, 'a4', None)
        wb.set_cell_contents(name, 'a5', None)
        wb.set_cell_contents(name, 'a6', '=MIN(a1:a5)')
        self.assertEqual(wb.get_cell_value(name, 'a6'), decimal.Decimal('0'))

        wb.set_cell_contents(name, 'a6', '=MIN()')
        value = wb.get_cell_value(name, 'a6')
        self.assertTrue(isinstance(value, sheets.CellError))
        self.assertEqual(value.get_type(), sheets.CellErrorType.TYPE_ERROR)

        wb.set_cell_contents(name, 'a1', '4')
        wb.set_cell_contents(name, 'a2', '=#ref!')
        wb.set_cell_contents(name, 'a4', '=#circref!')
        wb.set_cell_contents(name, 'a5', '3')
        wb.set_cell_contents(name, 'a6', '=MIN(a1:a5)')
        value = wb.get_cell_value(name, 'a6')
        self.assertTrue(isinstance(value, sheets.CellError))
        self.assertEqual(value.get_type(), sheets.CellErrorType.CIRCULAR_REFERENCE)

    def test_max_function(self):
        wb = sheets.Workbook()
        (_, name) = wb.new_sheet()
        wb.set_cell_contents(name, 'a1', '4')
        wb.set_cell_contents(name, 'a2', '3')
        wb.set_cell_contents(name, 'a4', '5')
        wb.set_cell_contents(name, 'a5', '3')
        wb.set_cell_contents(name, 'a6', "'6")
        wb.set_cell_contents(name, 'a9', '7')
        wb.set_cell_contents(name, 'a7', '=max(a1:a6)')
        self.assertEqual(wb.get_cell_value(name, 'a7'), decimal.Decimal('6'))

        wb.set_cell_contents(name, 'a7', '=max(a1:a6, a9)')
        self.assertEqual(wb.get_cell_value(name, 'a7'), decimal.Decimal('7'))

        wb.set_cell_contents(name, 'a7', '=max(a9, a1:a6)')
        self.assertEqual(wb.get_cell_value(name, 'a7'), decimal.Decimal('7'))

        wb.set_cell_contents(name, 'a6', '=max(a5:a1)')
        self.assertEqual(wb.get_cell_value(name, 'a6'), decimal.Decimal('5'))

        wb.set_cell_contents(name, 'a6', f'=max({name}!a1:a5)')
        self.assertEqual(wb.get_cell_value(name, 'a6'), decimal.Decimal('5'))

        wb.set_cell_contents(name, 'a1', None)
        wb.set_cell_contents(name, 'a2', None)
        wb.set_cell_contents(name, 'a4', None)
        wb.set_cell_contents(name, 'a5', None)
        wb.set_cell_contents(name, 'a6', '=max(a1:a5)')
        self.assertEqual(wb.get_cell_value(name, 'a6'), decimal.Decimal('0'))

        wb.set_cell_contents(name, 'a6', '=max()')
        value = wb.get_cell_value(name, 'a6')
        self.assertTrue(isinstance(value, sheets.CellError))
        self.assertEqual(value.get_type(), sheets.CellErrorType.TYPE_ERROR)

        wb.set_cell_contents(name, 'a1', '4')
        wb.set_cell_contents(name, 'a2', '=#ref!')
        wb.set_cell_contents(name, 'a4', '=#circref!')
        wb.set_cell_contents(name, 'a5', '3')
        wb.set_cell_contents(name, 'a6', '=max(a1:a5)')
        value = wb.get_cell_value(name, 'a6')
        self.assertTrue(isinstance(value, sheets.CellError))
        self.assertEqual(value.get_type(), sheets.CellErrorType.CIRCULAR_REFERENCE)

    def test_sum_function(self):
        wb = sheets.Workbook()
        (_, name) = wb.new_sheet()
        wb.set_cell_contents(name, 'a1', '4')
        wb.set_cell_contents(name, 'a2', '3')
        wb.set_cell_contents(name, 'a4', '5')
        wb.set_cell_contents(name, 'a5', "'3")
        wb.set_cell_contents(name, 'a6', 'true')
        wb.set_cell_contents(name, 'a9', '3')
        wb.set_cell_contents(name, 'a7', '=sum(a1:a6)')
        self.assertEqual(wb.get_cell_value(name, 'a7'), decimal.Decimal('16'))

        wb.set_cell_contents(name, 'a6', '=sum(a1:a5, a9)')
        self.assertEqual(wb.get_cell_value(name, 'a6'), decimal.Decimal('18'))

        wb.set_cell_contents(name, 'a6', '=sum(a9, a1:a5)')
        self.assertEqual(wb.get_cell_value(name, 'a6'), decimal.Decimal('18'))

        wb.set_cell_contents(name, 'a9', None)
        wb.set_cell_contents(name, 'a6', '=sum(a1:a5, a9)')
        self.assertEqual(wb.get_cell_value(name, 'a6'), decimal.Decimal('15'))
        wb.set_cell_contents(name, 'a6', '=sum(a9, a1:a5)')
        self.assertEqual(wb.get_cell_value(name, 'a6'), decimal.Decimal('15'))

        wb.set_cell_contents(name, 'a6', '=sum(a5:a1)')
        self.assertEqual(wb.get_cell_value(name, 'a6'), decimal.Decimal('15'))

        wb.set_cell_contents(name, 'a6', f'=sum({name}!a1:a5)')
        self.assertEqual(wb.get_cell_value(name, 'a6'), decimal.Decimal('15'))

        wb.set_cell_contents(name, 'a1', None)
        wb.set_cell_contents(name, 'a2', None)
        wb.set_cell_contents(name, 'a4', None)
        wb.set_cell_contents(name, 'a5', None)
        wb.set_cell_contents(name, 'a6', '=sum(a1:a5)')
        self.assertEqual(wb.get_cell_value(name, 'a6'), decimal.Decimal('0'))

        wb.set_cell_contents(name, 'a6', '=sum()')
        value = wb.get_cell_value(name, 'a6')
        self.assertTrue(isinstance(value, sheets.CellError))
        self.assertEqual(value.get_type(), sheets.CellErrorType.TYPE_ERROR)

        wb.set_cell_contents(name, 'a1', '4')
        wb.set_cell_contents(name, 'a2', '=#ref!')
        wb.set_cell_contents(name, 'a4', '=#circref!')
        wb.set_cell_contents(name, 'a5', '3')
        wb.set_cell_contents(name, 'a6', '=sum(a1:a5)')
        value = wb.get_cell_value(name, 'a6')
        self.assertTrue(isinstance(value, sheets.CellError))
        self.assertEqual(value.get_type(), sheets.CellErrorType.CIRCULAR_REFERENCE)

        wb.set_cell_contents(name, 'a1', '=sum(a2:a4)')
        wb.set_cell_contents(name, 'a2', '1')
        wb.set_cell_contents(name, 'a3', '2')
        wb.set_cell_contents(name, 'a4', '=a1')
        value = wb.get_cell_value(name, 'a1')
        self.assertTrue(isinstance(value, sheets.CellError))
        self.assertEqual(value.get_type(), sheets.CellErrorType.CIRCULAR_REFERENCE)
        value = wb.get_cell_value(name, 'a4')
        self.assertTrue(isinstance(value, sheets.CellError))
        self.assertEqual(value.get_type(), sheets.CellErrorType.CIRCULAR_REFERENCE)

    def test_avg_function(self):
        wb = sheets.Workbook()
        (_, name) = wb.new_sheet()
        wb.set_cell_contents(name, 'a1', '4')
        wb.set_cell_contents(name, 'a2', '3')
        wb.set_cell_contents(name, 'a4', '5')
        wb.set_cell_contents(name, 'a5', "'2")
        wb.set_cell_contents(name, 'a6', "true")
        wb.set_cell_contents(name, 'a9', '6')
        wb.set_cell_contents(name, 'a7', '=average(a1:a6)')
        self.assertEqual(wb.get_cell_value(name, 'a7'), decimal.Decimal('3'))

        wb.set_cell_contents(name, 'a6', '=average(a1:a5, a9)')
        self.assertEqual(wb.get_cell_value(name, 'a6'), decimal.Decimal('4'))

        wb.set_cell_contents(name, 'a6', '=average(a9, a1:a5)')
        self.assertEqual(wb.get_cell_value(name, 'a6'), decimal.Decimal('4'))

        wb.set_cell_contents(name, 'a9', None)
        wb.set_cell_contents(name, 'a6', '=average(a1:a5, a9)')
        self.assertEqual(wb.get_cell_value(name, 'a6'), decimal.Decimal('3.5'))
        wb.set_cell_contents(name, 'a6', '=average(a9, a1:a5)')
        self.assertEqual(wb.get_cell_value(name, 'a6'), decimal.Decimal('3.5'))

        wb.set_cell_contents(name, 'a6', '=average(a5:a1)')
        self.assertEqual(wb.get_cell_value(name, 'a6'), decimal.Decimal('3.5'))

        wb.set_cell_contents(name, 'a6', f'=average({name}!a1:a5)')
        self.assertEqual(wb.get_cell_value(name, 'a6'), decimal.Decimal('3.5'))

        wb.set_cell_contents(name, 'a1', None)
        wb.set_cell_contents(name, 'a2', None)
        wb.set_cell_contents(name, 'a4', None)
        wb.set_cell_contents(name, 'a5', None)
        wb.set_cell_contents(name, 'a6', '=average(a1:a5)')
        value = wb.get_cell_value(name, 'a6')
        self.assertTrue(isinstance(value, sheets.CellError))
        self.assertEqual(value.get_type(), sheets.CellErrorType.DIVIDE_BY_ZERO)

        wb.set_cell_contents(name, 'a6', '=average()')
        value = wb.get_cell_value(name, 'a6')
        self.assertTrue(isinstance(value, sheets.CellError))
        self.assertEqual(value.get_type(), sheets.CellErrorType.TYPE_ERROR)

    def test_avg_function2(self):
        wb = sheets.Workbook()
        (_, name) = wb.new_sheet()
        wb.set_cell_contents(name, 'a1', '4')
        wb.set_cell_contents(name, 'a2', '=#ref!')
        wb.set_cell_contents(name, 'a4', '=#circref!')
        wb.set_cell_contents(name, 'a5', '3')
        wb.set_cell_contents(name, 'a8', '=average(a1:a5)')
        value = wb.get_cell_value(name, 'a8')
        self.assertTrue(isinstance(value, sheets.CellError))
        self.assertEqual(value.get_type(), sheets.CellErrorType.CIRCULAR_REFERENCE)

    def test_hlookup_function(self):
        wb = sheets.Workbook()
        (_, name) = wb.new_sheet()
        wb.set_cell_contents(name, 'a1', '4')
        wb.set_cell_contents(name, 'b1', '3')
        wb.set_cell_contents(name, 'c1', '5')
        wb.set_cell_contents(name, 'd1', "2")
        wb.set_cell_contents(name, 'e1', "true")
        wb.set_cell_contents(name, 'f1', '=hlookup(2, a1:e1, 1)')
        self.assertEqual(wb.get_cell_value(name, 'f1'), decimal.Decimal('2'))

        wb.set_cell_contents(name, 'a1', '4')
        wb.set_cell_contents(name, 'b1', '3')
        wb.set_cell_contents(name, 'c1', '5')
        wb.set_cell_contents(name, 'd1', "2")
        wb.set_cell_contents(name, 'e1', "true")
        wb.set_cell_contents(name, 'f1', '=hlookup(2, a1:e2, 2)')
        self.assertEqual(wb.get_cell_value(name, 'f1'), None)

        wb.set_cell_contents(name, 'a1', '=f1')
        wb.set_cell_contents(name, 'a2', '3')
        wb.set_cell_contents(name, 'a3', '5')
        wb.set_cell_contents(name, 'a4', "2")
        wb.set_cell_contents(name, 'a5', "true")
        wb.set_cell_contents(name, 'b3', '=f1')
        wb.set_cell_contents(name, 'f1', '=hlookup(2, a1:b5, 2)')
        value = wb.get_cell_value(name, 'f1')
        self.assertTrue(isinstance(value, sheets.CellError))
        self.assertEqual(value.get_type(), sheets.CellErrorType.CIRCULAR_REFERENCE)

        wb.set_cell_contents(name, 'b3', '0')
        wb.set_cell_contents(name, 'a1', 'true')
        wb.set_cell_contents(name, 'a6', '=hlookup(5, a1:e6, 1)')
        self.assertEqual(wb.get_cell_value(name, 'a6'), decimal.Decimal('5'))

        wb.set_cell_contents(name, 'a1', 'true')
        wb.set_cell_contents(name, 'a6', '=hlookup(a1, a1:a6, a10)')
        value = wb.get_cell_value(name, 'a6')
        self.assertTrue(isinstance(value, sheets.CellError))
        self.assertEqual(value.get_type(), sheets.CellErrorType.TYPE_ERROR)

        wb.set_cell_contents(name, 'a1', 'true')
        wb.set_cell_contents(name, 'a6', '=hlookup(a1, a1:a6, 0)')
        value = wb.get_cell_value(name, 'a6')
        self.assertTrue(isinstance(value, sheets.CellError))
        self.assertEqual(value.get_type(), sheets.CellErrorType.TYPE_ERROR)

        wb.set_cell_contents(name, 'a1', 'true')
        wb.set_cell_contents(name, 'a6', '=hlookup(a1, a1:a6, 7)')
        value = wb.get_cell_value(name, 'a6')
        self.assertTrue(isinstance(value, sheets.CellError))
        self.assertEqual(value.get_type(), sheets.CellErrorType.TYPE_ERROR)

        wb.set_cell_contents(name, 'a6', '=hlookup()')
        value = wb.get_cell_value(name, 'a6')
        self.assertTrue(isinstance(value, sheets.CellError))
        self.assertEqual(value.get_type(), sheets.CellErrorType.TYPE_ERROR)

    def test_vlookup_function(self):
        wb = sheets.Workbook()
        (_, name) = wb.new_sheet()
        wb.set_cell_contents(name, 'a1', '4')
        wb.set_cell_contents(name, 'a2', '3')
        wb.set_cell_contents(name, 'a3', '5')
        wb.set_cell_contents(name, 'a4', "2")
        wb.set_cell_contents(name, 'a5', "true")
        wb.set_cell_contents(name, 'f1', '=vlookup(2, a1:a5, 1)')
        self.assertEqual(wb.get_cell_value(name, 'f1'), decimal.Decimal('2'))

        wb.set_cell_contents(name, 'a1', '4')
        wb.set_cell_contents(name, 'a2', '3')
        wb.set_cell_contents(name, 'a3', '5')
        wb.set_cell_contents(name, 'a4', "2")
        wb.set_cell_contents(name, 'a5', "true")
        wb.set_cell_contents(name, 'f1', '=vlookup(2, a1:b5, 2)')
        self.assertEqual(wb.get_cell_value(name, 'f1'), None)

        wb.set_cell_contents(name, 'a1', '=1')
        wb.set_cell_contents(name, 'a2', '3')
        wb.set_cell_contents(name, 'a3', '5')
        wb.set_cell_contents(name, 'a4', "2")
        wb.set_cell_contents(name, 'b5', '=f1')
        wb.set_cell_contents(name, 'a5', "true")
        wb.set_cell_contents(name, 'f1', '=vlookup(2, a1:b5, 2)')
        value = wb.get_cell_value(name, 'f1')
        self.assertTrue(isinstance(value, sheets.CellError))
        self.assertEqual(value.get_type(), sheets.CellErrorType.CIRCULAR_REFERENCE)

        wb.set_cell_contents(name, 'b5', '4')

        wb.set_cell_contents(name, 'a1', 'true')
        wb.set_cell_contents(name, 'a7', '=vlookup(5, a1:e6, 1)')
        self.assertEqual(wb.get_cell_value(name, 'a7'), decimal.Decimal('5'))

        wb.set_cell_contents(name, 'a1', 'true')
        wb.set_cell_contents(name, 'a6', '=vlookup(a1, a1:a6, a10)')
        value = wb.get_cell_value(name, 'a6')
        self.assertTrue(isinstance(value, sheets.CellError))
        self.assertEqual(value.get_type(), sheets.CellErrorType.TYPE_ERROR)

        wb.set_cell_contents(name, 'a1', 'true')
        wb.set_cell_contents(name, 'a6', '=vlookup(a1, a1:a6, 0)')
        value = wb.get_cell_value(name, 'a6')
        self.assertTrue(isinstance(value, sheets.CellError))
        self.assertEqual(value.get_type(), sheets.CellErrorType.TYPE_ERROR)

        wb.set_cell_contents(name, 'a1', 'true')
        wb.set_cell_contents(name, 'a6', '=vlookup(a1, a1:a6, 7)')
        value = wb.get_cell_value(name, 'a6')
        self.assertTrue(isinstance(value, sheets.CellError))
        self.assertEqual(value.get_type(), sheets.CellErrorType.TYPE_ERROR)

        wb.set_cell_contents(name, 'a6', '=vlookup()')
        value = wb.get_cell_value(name, 'a6')
        self.assertTrue(isinstance(value, sheets.CellError))
        self.assertEqual(value.get_type(), sheets.CellErrorType.TYPE_ERROR)

if __name__ == '__main__':
    unittest.main()
